@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@inject AcronymContext Context
@inject NavigationManager NM
@attribute [StreamRendering]


@if (acronyms.Count == 0)
{
    <p><em>Loading Acronyms ...</em></p>
}
else
{
    <QuickGrid Class="table" Items="Context.Acronym">
        
        <PropertyColumn Property="acronym => acronym.Short"/>
        <PropertyColumn Property="acronym => acronym.Long"/>
        
        <TemplateColumn Context="acronym">
            <a href="edit-acronym/@acronym.Id">Edit</a> |
            <a href="@($"acronyms/details?id={acronym.Id}")">Details</a>
        </TemplateColumn>
        
        <TemplateColumn Context="acronym">
            <form method="post" data-enhance
                  @formname="@($"DeleteAcronymForm{acronym.Id}")"
                  @onsubmit="() => DeleteAcronym(acronym.Id)">
                <button class="btn btn-danger">
                    Delete
                </button>
                <AntiforgeryToken/>
            </form>
        </TemplateColumn>
        
    </QuickGrid>
    
    <a href="/edit-acronym">Add an Acronym</a>
}

@code {

    List<TILApp.Models.Acronym> acronyms = [];

    protected override async Task OnInitializedAsync()
    {
        acronyms = await Context.Acronym.Include(a => a.User).ToListAsync();
    }
    
    async Task DeleteAcronym(int id)
    {
        var acronym = await Context.Acronym.FindAsync(id);
        if (acronym is not null)
        {
            Context.Remove(acronym);
            await Context.SaveChangesAsync();
            acronyms = await Context.Acronym.ToListAsync();
            NM.NavigateTo("/", true);
        }
    }

}