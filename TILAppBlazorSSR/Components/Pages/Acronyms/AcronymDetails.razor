@page "/acronym-details/{Id:int}"
@inject NavigationManager NM
@inject Context DB
@attribute [StreamRendering]

<PageTitle>Details</PageTitle>

@if (Acronym == null)
{
    <p>
        <em>Loading Acronyms ...</em>
    </p>
}
else
{
    <h1>@Acronym.Short</h1>
    <h2>@Acronym.Long</h2>
    <p>Created by @user.Name</p>

    @if (categories!.Count > 0)
    {
        <h3>Categories</h3>
        @foreach (var category in categories)
        { <li>@category.Name</li> }
    }
    <AuthorizeView Context="invisible">
        <EditForm method="post" Model="Acronym" OnValidSubmit="DeleteAcronym" FormName="delete" Enhance>
            <a class="btn btn-primary" href="edit-acronym/@Acronym.Id" role="button">Edit</a>&nbsp;
            <button type="submit" class="btn btn-danger" disabled="@(Acronym is null)">Delete</button>
        </EditForm>
    </AuthorizeView>
    
}

@code {
    [SupplyParameterFromForm] public Acronym? Acronym { get; set; } = new();

    User user = new();
    ICollection<Category>? categories = [];

    [Parameter] public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Acronym = await DB.Acronym.FirstOrDefaultAsync(a => a.Id == Id)!;
        if (Acronym is not null)
        {
            user = await DB.User.FirstOrDefaultAsync(u => u.Id == Acronym!.UserId) 
                   ?? throw new InvalidOperationException();
            await DB.Entry(Acronym).Collection(a => a.Categories!).LoadAsync();
            categories = Acronym!.Categories;    
        }
        
    }

    public async Task DeleteAcronym()
    {
        if (Acronym is not null) DB.Acronym.Remove(Acronym);
        await DB.SaveChangesAsync();
        NM.NavigateTo("/");
    }

}

